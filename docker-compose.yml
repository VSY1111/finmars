services:
  nginx:
    image: nginx
    restart: always
    volumes:
      - ./nginx/conf/main-domain.conf.template:/etc/nginx/templates/main-domain.conf.template
      - ./nginx/conf/auth-domain.conf.template:/etc/nginx/templates/auth-domain.conf.template
      - ./nginx/conf/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/www:/var/www:ro
      - ./nginx/ssl:/etc/letsencrypt
    env_file:
      - .env
    depends_on:
      - core
      - workflow
      - vue-portal
      - portal
      - workflow-portal
      - finmars-start-page
      - pdfgen
      - excelgen
      - keycloak
    ports:
      - "80:80"
      - "443:443"
      - "${AUTH_DOMAIN_PORT}:${AUTH_DOMAIN_PORT}"

  certbot:
    image: certbot/certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
    env_file:
      - .env
    ports:
      - "80:80" 
    command: [
      "certonly",
      "--standalone",
      "--non-interactive",
      "--agree-tos",
      "-d", "${MAIN_DOMAIN_NAME}",
      "-d", "${AUTH_DOMAIN_NAME}"
    ]

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.3
    restart: always
    command: start --import-realm
    volumes:
      - ./keycloak/config/keycloak.conf:/opt/keycloak/conf/keycloak.conf:ro
      - ./nginx/ssl:/etc/letsencrypt
      - ./keycloak/themes/finmars:/opt/keycloak/themes/finmars
      - ./keycloak/data/:/opt/keycloak/data/import
    env_file:
      - .env
    environment:
      - KC_DB=postgres
      - KC_BOOTSTRAP_ADMIN_USERNAME=${ADMIN_USERNAME}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - KEYCLOAK_ADMIN=${ADMIN_USERNAME}
      - KEYCLOAK_ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - KEYCLOAK_IMPORT=/opt/keycloak/data/import
    depends_on:
      db_keycloak:
        condition: service_healthy
    healthcheck:
      test:  ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8080;echo -e \"GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  core: &core-base
    image: finmars/finmars-core:${CORE_IMAGE_VERSION}
    platform: linux/amd64
    restart: always
    volumes:
      - storage:/var/app/finmars_data
    env_file:
      - .env
    environment:
      - DB_NAME=core_realm00000
      - DJANGO_SETTINGS_MODULE=poms_app.settings
    depends_on:
      core-migration:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
      keycloak:
        condition: service_healthy

  core-worker:
    <<: *core-base
    command: >
      sh -c "celery --app poms_app worker --concurrency=1 --loglevel=INFO -n $CORE_WORKER_NAME -Q $CORE_QUEUES --max-tasks-per-child=1"

  core-migration:
    <<: *core-base
    restart: "no" 
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    command: ["python", "/var/app/manage.py", "migrate_all_schemes"]

  workflow: &workflow-base
    image: finmars/finmars-workflow:${WORKFLOW_IMAGE_VERSION}
    platform: linux/amd64
    restart: always
    volumes:
      - storage:/var/app/finmars_data
    env_file:
      - .env
    environment:
      - DB_NAME=workflow_realm00000
      - DJANGO_SETTINGS_MODULE=workflow_app.settings
    depends_on:
      workflow-migration:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
      keycloak:
        condition: service_healthy

  workflow-worker:
    <<: *workflow-base
    command: >
      sh -c "celery --app workflow_app worker --concurrency=1 --loglevel=INFO -n $WORKFLOW_WORKER_NAME -Q $WORKFLOW_QUEUES --max-tasks-per-child=1"

  workflow-scheduler:
    <<: *workflow-base
    command: >
      sh -c "celery --app workflow_app beat --loglevel=INFO --scheduler workflow.schedulers:DatabaseScheduler --pidfile=/tmp/celerybeat.pid"

  workflow-migration:
    <<: *workflow-base
    restart: "no" 
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    command: ["python", "/var/app/manage.py", "migrate_all_schemes"]

  workflow-flower:
    <<: *workflow-base
    command: >
      sh -c "celery --app workflow_app flower --url_prefix=$REALM_CODE/workflow/flower --broker={CELERY_BROKER_URL}"

  pdfgen:
    platform: linux/amd64
    image: finmars/finmars-pdfgen:latest
    restart: always

  excelgen:
    platform: linux/amd64
    image: finmars/finmars-excelgen:latest
    restart: always

  finmars-start-page:
    platform: linux/amd64
    image: finmars/finmars-start-page:latest
    restart: always
    env_file:
      - .env

  portal:
    platform: linux/amd64
    image: finmars/finmars-portal:${PORTAL_IMAGE_VERSION}
    restart: always
    env_file:
      - .env

  vue-portal:
    platform: linux/amd64
    image: finmars/finmars-vue-portal:${VUE_PORTAL_IMAGE_VERSION}
    restart: always
    environment:
      - NUXT_APP_BUILD_ASSETS_DIR=/realm00000/v/_nuxt/
    env_file:
      - .env

  workflow-portal:
    platform: linux/amd64
    image: finmars/finmars-workflow-portal:${WORKFLOW_PORTAL_IMAGE_VERSION}
    restart: always
    environment:
      - NUXT_APP_BUILD_ASSETS_DIR=/realm00000/w/_nuxt/
    env_file:
      - .env

  db:
    image: postgres:13-alpine
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME} 
    stdin_open: true
    tty: true
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}", "-d", "${DB_NAME}"]
      interval: 10s
      retries: 5
      start_period: 15s
      timeout: 10s

  db_keycloak:
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_DB=${KC_DB_URL_DATABASE}
      - POSTGRES_USER=${KC_DB_USERNAME}
      - POSTGRES_PASSWORD=${KC_DB_PASSWORD}
    stdin_open: true
    tty: true
    volumes:
      - postgres_data_keycloak:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KC_DB_USERNAME}", "-d", "${KC_DB_URL_DATABASE}"]
      interval: 10s
      retries: 5
      start_period: 15s
      timeout: 10s

  rabbitmq:
    image: rabbitmq
    restart: always
    volumes:
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    stdin_open: true
    tty: true

  redis:
    image: redis
    restart: always
    stdin_open: true
    tty: true

volumes:
  postgres_data:
  postgres_data_keycloak:
  storage:
